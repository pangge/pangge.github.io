<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[goldencui]]></title>
  <subtitle><![CDATA[get a real life]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://goldencui.org/"/>
  <updated>2014-09-26T10:40:47.705Z</updated>
  <id>http://goldencui.org/</id>
  
  <author>
    <name><![CDATA[goldencwcui]]></name>
    <email><![CDATA[goldencwcui@hotmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[基于FPGA的SOPC系统设计tips]]></title>
    <link href="http://goldencui.org/2014/09/26/%E5%9F%BA%E4%BA%8EFPGA%E7%9A%84SOPC%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1tips/"/>
    <id>http://goldencui.org/2014/09/26/基于FPGA的SOPC系统设计tips/</id>
    <published>2014-09-26T09:57:53.000Z</published>
    <updated>2014-09-26T10:38:37.000Z</updated>
    <content type="html"><![CDATA[<p> 之前做了半年的基于FPGA的SOPC的研究，期间遇到很多问题，对于我这个以前只搞过软件的人来说简直是一种折磨，从最简单的串口信息获取，到FPGA外设驱动,这期间遇到很多困难，好在老天有眼一一克服，这篇文章零散的记录基于FPGA嵌入式PPC440微处理器+standalone模式下系统编程方面的操作，以tips为形式展现，只列出系统构建过程中遇到的问题以及解决方法。一些XILINX官网可以查到的技术资料这里暂且不提，后面会附上链接。</p>
<h2 id="1-_浮点数据串口输出">1. 浮点数据串口输出</h2>
<p>XILINX公司提供的标准c一部分实现，并不是所有。它提供的标准串口输出函数包括xil_printf(),printnum();前一个函数和标准c相似，printnum()输出数字型数据。但是自己项目中涉及到浮点型数据的展示，所以想着xil_printf(“%f”,float_data)，发现根本不行，检查了xil_print()的源码，发现根本没有浮点输出的模式（orz…）。<br><a id="more"></a><br>仔细检查了XILINX SDK的技术文档，发现它提供了另一个标准函数的实现sprintf()，和print()函数，print()函数就是打印字符类型数据，所以我们可以把浮点类型数据转变为char*字符串，然后输出。所以包装一下，加入了double型和float型数据的打印程序：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> print_float(<span class="keyword">float</span> f)</div><div class="line">{</div><div class="line">	<span class="keyword">char</span> <span class="keyword">out</span>[<span class="number">20</span>];</div><div class="line">	<span class="keyword">char</span> *output=<span class="keyword">out</span>;</div><div class="line">	sprintf(output,<span class="string">"%.3f"</span>,f);</div><div class="line">	print(<span class="keyword">out</span>);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">void</span> print_float(<span class="keyword">float</span> f)</div><div class="line">{</div><div class="line">	<span class="keyword">char</span> <span class="keyword">out</span>[<span class="number">20</span>];</div><div class="line">	<span class="keyword">char</span> *output=<span class="keyword">out</span>;</div><div class="line">	sprintf(output,<span class="string">"%.3f"</span>,f);</div><div class="line">	print(<span class="keyword">out</span>);</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="2-_Sqrt函数问题">2. Sqrt函数问题</h2>
<p>程序中遇到过一个地方需要sqrt()调用，一般思路是：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Double_result</span>=<span class="string">sqrt(double_data);</span></div></pre></td></tr></table></figure>

<p>程序一运行我就哭了，崩溃。。。。仔细测试了很多方法，发现这种模式可行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">u32_result</span>=<span class="string">sqrt(u32_data);</span></div></pre></td></tr></table></figure>

<p>可惜u32类型类似整形，会对小数位截断，这样得不到精确的解，于是尝试改进得到一个可以运行的模式：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">u32_result=<span class="built_in">sqrt</span>((<span class="keyword">double</span>)u32_data);</div></pre></td></tr></table></figure>

<p>可行，但是还不满意，得到结果还是整形；突然想到我们系统需求是小数点3位精确，这样的话可以采取这样的形式解决：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">u32_data=</span>u32_data*<span class="number">10000</span>;</div><div class="line"><span class="variable">u32_result=</span>sqrt(u32_data);</div><div class="line"><span class="variable">double_result=</span>(double)u32_result/<span class="number">100</span>;</div></pre></td></tr></table></figure>

<h2 id="3-_DDR2_读写_">3. DDR2 读写 </h2>
<p>首先在硬件系统结构设计的时候，加入DDR2外设，得到DDR2存储的base_address，然后再standalone模式中加入实现。<br>读：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">u32_DDR2_addr =</span> base_address; (例如：<span class="number">0</span>x00000000)</div><div class="line"><span class="variable">u32_word =</span> u32_DDR2_addr[u32_index];</div></pre></td></tr></table></figure>

<p>写：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">u32_DDR2_addr[u32_index] </span>=<span class="string"> u32_word;</span></div></pre></td></tr></table></figure>

<h2 id="4-_PPC440_微处理器时间获取">4. PPC440 微处理器时间获取</h2>
<p>在XPS上进行硬件系统设计的采用的PPC440主频是125MHZ。XILINX内并未实现标准操作系统的timer功能，所以查阅了XILINX提供的源码找到一种提供计时的方法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">u32 ReadTimer()</div><div class="line">{</div><div class="line">	u32 timeCount;</div><div class="line">	timeCount=XTmrCtr_ReadReg(InstancePtr.BaseAddress,</div><div class="line">					 TmrCtrNumber, XTC_TCR_OFFSET);</div><div class="line">	return timeCount;</div><div class="line">}</div><div class="line"></div><div class="line">void InitTimer()</div><div class="line">{</div><div class="line">	InstancePtr.BaseAddress=TIMER_ADDR; //timer addr</div><div class="line">	TmrCtrNumber=TIMER_NUM; // timer number</div><div class="line">	/*</div><div class="line">	 * Reset the timer and the interrupt</div><div class="line">	 */</div><div class="line">	XTmrCtr_WriteReg(InstancePtr.BaseAddress, TmrCtrNumber,</div><div class="line">			  XTC_TCSR_OFFSET,</div><div class="line">			  XTC_CSR_INT_OCCURED_MASK | XTC_CSR_LOAD_MASK);</div><div class="line"></div><div class="line"></div><div class="line">	/*</div><div class="line">	 * Set the control/status register to enable timer</div><div class="line">	 */</div><div class="line">	XTmrCtr_WriteReg(InstancePtr.BaseAddress, TmrCtrNumber,</div><div class="line">			  XTC_TCSR_OFFSET, XTC_CSR_ENABLE_TMR_MASK);</div><div class="line">}</div></pre></td></tr></table></figure>

<p>使用计时方法的时候首先需要调用一次InitTimer，然后在计数器开启的状态下可以调用ReadTimer读计数器寄存器.<br>例：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="constant">InitTimer</span>(); <span class="regexp">//</span> initial  timer	</div><div class="line"><span class="constant">Todo</span> <span class="class"><span class="keyword">module</span></span></div><div class="line">u32_TimerCount =<span class="constant">ReadTimer</span>();</div></pre></td></tr></table></figure>

<p>这里得到的u32_TimerCount是PPC的指令计数，得到精确的描述还需要如下处理：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">u32</span> sec_time = u32_TimerCount/<span class="number">125000000</span>; <span class="comment">//(ppc440 主频125MHZ)</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p> 之前做了半年的基于FPGA的SOPC的研究，期间遇到很多问题，对于我这个以前只搞过软件的人来说简直是一种折磨，从最简单的串口信息获取，到FPGA外设驱动,这期间遇到很多困难，好在老天有眼一一克服，这篇文章零散的记录基于FPGA嵌入式PPC440微处理器+standalone模式下系统编程方面的操作，以tips为形式展现，只列出系统构建过程中遇到的问题以及解决方法。一些XILINX官网可以查到的技术资料这里暂且不提，后面会附上链接。</p>
<h2 id="1-_浮点数据串口输出">1. 浮点数据串口输出</h2>
<p>XILINX公司提供的标准c一部分实现，并不是所有。它提供的标准串口输出函数包括xil_printf(),printnum();前一个函数和标准c相似，printnum()输出数字型数据。但是自己项目中涉及到浮点型数据的展示，所以想着xil_printf(“%f”,float_data)，发现根本不行，检查了xil_print()的源码，发现根本没有浮点输出的模式（orz…）。<br>]]>
    
    </summary>
    
      <category term="SOPC XILINX PPC" scheme="http://goldencui.org/tags/SOPC-XILINX-PPC/"/>
    
      <category term="嵌入式" scheme="http://goldencui.org/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[git基础命令总结]]></title>
    <link href="http://goldencui.org/2014/07/28/git%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://goldencui.org/2014/07/28/git基础命令总结/</id>
    <published>2014-07-27T16:15:26.000Z</published>
    <updated>2014-09-26T07:11:47.000Z</updated>
    <content type="html"><![CDATA[<h4 id="（针对ssh方式）"><em>（针对ssh方式）</em></h4>
<hr>
<h1 id="1_github_代码提交">1  github 代码提交</h1>
<p><strong>创建新的版本库</strong></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">touch README.md</div><div class="line">$git init</div><div class="line">$git add README.md</div><div class="line">$git commit -m <span class="string">"first commit"</span></div><div class="line">$git remote add origin git<span class="annotation">@github</span>.com:youname/youproject.git</div><div class="line">$git push -u origin master</div></pre></td></tr></table></figure>

<p><strong>推送现有的版本库</strong></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$git remote add origin git<span class="annotation">@github</span>.com:youname/youproject.git</div><div class="line">$git push -u origin master</div></pre></td></tr></table></figure>

<p><strong>添加修改的版本库</strong></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$git add . <span class="comment">// .表示添加所有文件 </span></div><div class="line">$git commit -m <span class="string">"修改日志"</span></div><div class="line">$git push -u origin master</div></pre></td></tr></table></figure>

<p><strong><em>错误解决</em></strong></p>
<h2><a id="more"></a></h2>
<h4 id="1-运行：">1.运行：</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin git<span class="annotation">@github</span>.com:youname/youproject.git</div></pre></td></tr></table></figure>

<p>错误提示：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fatal: remote origin already exists.</div></pre></td></tr></table></figure>

<p>解决办法：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$git remote rm origin</div></pre></td></tr></table></figure>

<h4 id="2-运行：">2.运行：</h4>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git $ git push origin master</div></pre></td></tr></table></figure>

<p>错误提示：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">error:failed to push som refs to</div></pre></td></tr></table></figure>

<p>解决办法：</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git pull origin master <span class="comment">// 先把远程服务器中版本拉取下来，再push</span></div></pre></td></tr></table></figure>

<hr>
<h1 id="2_github_代码clone">2  github 代码clone</h1>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git clone git<span class="annotation">@github</span>.com:youname/youproject.git  <span class="string">"path"</span> <span class="comment">// path 要存放本地版本库的地址</span></div></pre></td></tr></table></figure>

<p><img src="http://github.global.ssl.fastly.net/images/modules/logos_page/Octocat.png" alt="GitHub" title="GitHub cat"></p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="（针对ssh方式）"><em>（针对ssh方式）</em></h4>
<hr>
<h1 id="1_github_代码提交">1  github 代码提交</h1>
<p><strong>创建新的版本库</strong></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">touch README.md</div><div class="line">$git init</div><div class="line">$git add README.md</div><div class="line">$git commit -m <span class="string">"first commit"</span></div><div class="line">$git remote add origin git<span class="annotation">@github</span>.com:youname/youproject.git</div><div class="line">$git push -u origin master</div></pre></td></tr></table></figure>

<p><strong>推送现有的版本库</strong></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$git remote add origin git<span class="annotation">@github</span>.com:youname/youproject.git</div><div class="line">$git push -u origin master</div></pre></td></tr></table></figure>

<p><strong>添加修改的版本库</strong></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$git add . <span class="comment">// .表示添加所有文件 </span></div><div class="line">$git commit -m <span class="string">"修改日志"</span></div><div class="line">$git push -u origin master</div></pre></td></tr></table></figure>

<p><strong><em>错误解决</em></strong></p>
<h2>]]>
    
    </summary>
    
      <category term="github" scheme="http://goldencui.org/tags/github/"/>
    
      <category term="代码托管" scheme="http://goldencui.org/categories/%E4%BB%A3%E7%A0%81%E6%89%98%E7%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[(ZZ)休息，休息一会儿]]></title>
    <link href="http://goldencui.org/2014/07/26/%E4%BC%91%E6%81%AF%EF%BC%8C%E4%BC%91%E6%81%AF%E4%B8%80%E4%BC%9A%E5%84%BF/"/>
    <id>http://goldencui.org/2014/07/26/休息，休息一会儿/</id>
    <published>2014-07-26T04:01:39.000Z</published>
    <updated>2014-09-26T07:11:18.000Z</updated>
    <content type="html"><![CDATA[<p><img src="http://www.yinwang.org/images/yixiu.jpg" alt="" title="一休哥 1"></p>
<p>本人进入了比较长的，理所应得的休息和娱乐时间。无聊时也看看闲书和电影。这里推荐几个最近看的东西。</p>
<h1 id="《The_Design_of_Everyday_Things》">《The Design of Everyday Things》</h1>
<h2><a id="more"></a></h2>
<p>最近给我最大影响的是这本1988年出版的《<a href="http://www.amazon.com/Design-Everyday-Things-Revised-Expanded-ebook/dp/B00E257T6C" target="_blank" rel="external">The Design of Everyday Things</a>》（简称DOET）。有趣的是，它的作者 Don Norman 曾经是 Apple Fellow，也是《<a href="http://web.mit.edu/~simsong/www/ugh.pdf" target="_blank" rel="external">The Unix-Haters Handbook</a>》一书序言的作者。</p>
<p>DOET 不但包含并且支持了我的博文《<a href="http://www.yinwang.org/blog-cn/2014/04/11/hacker-culture" target="_blank" rel="external">黑客文化的精髓</a>》以及《<a href="http://www.yinwang.org/blog-cn/2014/01/25/pl-and" target="_blank" rel="external">程序语言与……</a>》里的基本观点，而且提出了比《<a href="http://www.yinwang.org/blog-cn/2012/05/18/user-friendliness" target="_blank" rel="external">什么是“对用户友好”</a>》更精辟可行的解决方案。</p>
<p>我觉得这应该是每个程序员必读的书籍。为什么每个程序员必读呢？因为虽然这本书是设计类专业的必读书籍，而计算机及其编程语言和工具，其实才是作者指出的缺乏设计思想的“重灾区”。看了它，你会发现很多所谓的“人为错误”，其实是工具的设计不合理造成的。一个设计良好的工具，应该只需要很少量的文档甚至不需要文档。这本书将提供给你改进一切事物的原则和灵感。你会恢复你的人性。</p>
<p>值得一提的是，虽然 Don Norman 曾经是 Apple Fellow，但我觉得 Apple 产品设计的人性化程度与 Norman 大叔的思维高度还是有一定的差距的。</p>
<p>如果你跟我一样不想用眼睛看书，可以到 Audible 买本<a href="http://www.audible.com/pd/Science-Technology/The-Design-of-Everyday-Things-Audiobook/B005I5MDGQ" target="_blank" rel="external">有声书</a>来听。</p>
<h1 id="《The_Conquest_of_Happiness》">《The Conquest of Happiness》</h1>
<hr>
<p>每个人都想得到快乐，但是他们往往误解了快乐的来源，追求了错误的东西，所以大多数人因此得到的是痛苦，并且给其他人带来痛苦。英国哲学家和数学家罗素写于1930年的《<a href="http://www.amazon.com/The-Conquest-Happiness-Bertrand-Russell/dp/0871401622" target="_blank" rel="external">The Conquest of Happiness</a>》就是彻底的分析这些2014现代人的常见问题的。</p>
<p>在第一部分，罗素透彻的分析了几个常见的不快乐的原因：看破红尘，竞争，过度追求刺激，疲劳，嫉妒，罪恶感，被害妄想症，…… 第二部分，他提出了得到快乐的有效方法。</p>
<p>如果你认为自己没有这些问题，或者认为自己懂得这些是怎么回事，请再次反思一下，因为每个人都或多或少有这些问题。特别是我发现，竞争和攀比所带来的不快乐，在中国人里面是很普遍的现象。</p>
<p>另外，很多心理学家，特别是所谓“正向心理学”（positive psychology），也声称研究如何使人快乐，但我发现他们很多只是扯着“快乐”的幌子，开发自己的市场。罗素的思想比他们深刻很多。</p>
<h1 id="大独裁者">大独裁者</h1>
<hr>
<p>谈到人性，我推荐卓别林在电影《<a href="https://www.youtube.com/watch?v=6FMNFvKEy4c" target="_blank" rel="external">大独裁者</a>》里面的最后演讲。他引起了我对技术的价值的思考。有人说，世界不是毁在疯子手里就是毁在工作狂手里，是有一定的道理的。</p>
<h1 id="摩登时代">摩登时代</h1>
<hr>
<p>其实比《大独裁者》更幽默，更有趣，对现代社会更有意义的，是卓别林的《<a href="http://www.amazon.com/Modern-Times-Charlie-Chaplin/dp/B004DARF6A" target="_blank" rel="external">摩登时代</a>》。这样一部1930年代的黑白无声电影，道出了直到2014年的今天，世界上最大的问题：过度工作。<br>现代社会很多人为了所谓的“生存”，把自己变成了一台盲目不停工作的机器。加班加点的干活，并且还试图让别人也变成跟他一样。一切都是为了工作，为了效率，为了“优秀”，为了出人头地。太多的野心，太多的目标，却对身边最简单的乐趣视而不见。试试放慢匆忙的脚步，思考一下自己在干什么吧！</p>
<p>因为这些原因，我继续睡觉，这是拯救世界的最好办法 zZZZ</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="http://www.yinwang.org/images/yixiu.jpg" alt="" title="一休哥 1"></p>
<p>本人进入了比较长的，理所应得的休息和娱乐时间。无聊时也看看闲书和电影。这里推荐几个最近看的东西。</p>
<h1 id="《The_Design_of_Everyday_Things》">《The Design of Everyday Things》</h1>
<h2>]]>
    
    </summary>
    
      <category term="hacker" scheme="http://goldencui.org/tags/hacker/"/>
    
      <category term="转载" scheme="http://goldencui.org/categories/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
</feed>
